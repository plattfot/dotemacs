#+TITLE: Emacs configuration

Inspired by [[https://github.com/hrs/dotfiles/tree/master/emacs.d][hrs]] org config

* General
** Package management
   Setup package to handle all packages I use. Will download packages
   that are missing.
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     ; list the packages you want
     (setq package-list 
           '(ag
             async
             auto-complete
             buffer-move
             evil-numbers
             expand-region
             flycheck
             git-commit
             gnuplot
             go-autocomplete
             ledger-mode
             magit
             magit-popup
             mc-extras
             move-text
             multi-term
             multiple-cursors
             popup
             org-bullets
             rtags
             string-inflection
             sudo-edit
             with-editor
             yaml-mode
             yasnippet ))

     ;; Add melpa to the package repo
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)

     ;; Activate all the packages (in particular autoloads)
     (package-initialize)

     ;; Fetch the list of packages available 
     (unless package-archive-contents
       (package-(region-end)fresh-contents))

     ;; Install the missing packages
     (dolist (package package-list)
       (unless (package-installed-p package)
         (package-install package)))

   #+END_SRC
** Custom plugins
  Add path to custom plugins
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugins")
  #+END_SRC
  
** UI
*** Maximize work area
   Disable the menu, tool and scroll bar since they just take up
   space.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
   #+END_SRC
*** Splash screen
   Dismiss the startup screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
   #+END_SRC
   
*** Font
    Set font and font size
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 92)
      (set-face-attribute 'default nil :font "Hack")
    #+END_SRC
*** Column number
   Show column number in the info bar
   #+BEGIN_SRC emacs-lisp
     (column-number-mode 1)
   #+END_SRC
** ibuffer
    Use ibuffer instead of list-buffers, has some neat features.
    #+BEGIN_SRC emacs-lisp
      (defalias 'list-buffers 'ibuffer)    
    #+END_SRC
** Behaviour
   Highlight matching brackets
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
   
   Disable electric-indent-mode since I"m using C-j for that.
   #+BEGIN_SRC emacs-lisp
     (setq electric-indent-mode nil)
   #+END_SRC
** Backup/autosave
   One annoying thing with emacs is it that it leaves backup files all
   over the place.  Fixing that by dumping all backup/autosave files
   in to one directory.
   #+BEGIN_SRC emacs-lisp
     (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
     (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
     (setq backup-directory-alist (list (cons ".*" backup-dir)))
     (setq auto-save-list-file-prefix autosave-dir)
     (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
   #+END_SRC

** Theme
   Point emacs to where it can find the sunburst theme. Depending on
   if emacs is started in a shell or not load the correct theme.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/sunburst-theme")
     (if window-system (load-theme 'sunburst t) (load-theme 'sunburst_term t))
   #+END_SRC
** Calendar
   Week starts on Monday.
   #+BEGIN_SRC emacs-lisp
     (setq calendar-week-start-day 1)
   #+END_SRC
* Modes
** Auto complete
   Init autocomplete
   #+BEGIN_SRC emacs-lisp
     (require 'auto-complete-config)
     (ac-config-default)
   #+END_SRC
   
   Auto complete words when pressing tab. But disable it for enter.
   #+BEGIN_SRC emacs-lisp
     (define-key ac-completing-map "\t" 'ac-expand)
     (define-key ac-completing-map "\r" nil)
   #+END_SRC
*** Programming specific 

   Disable autocomplete when typing // comments in c++
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c++-mode-hook
               (lambda ()
                 (make-local-variable 'ac-ignores)
                 (add-to-list 'ac-ignores "//")))
   #+END_SRC
                  
   ac-omni-completion-sources is made buffer local so you need to add
   it to a mode hook to activate on whatever buffer you want to use it
   with.  This example uses C mode (as you probably surmised).
   
   auto-complete.el expects ac-omni-completion-sources to be a list of
   cons cells where each cell's car is a regex that describes the
   syntactical bits you want AutoComplete to be aware of. The cdr of
   each cell is the source that will supply the completion data.  The
   following tells autocomplete to begin completion when you type in a
   . or a ->
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook 
               '(lambda ()
                  (add-to-list 'ac-omni-completion-sources
                               (cons "\\." '(ac-source-semantic)))
                  (add-to-list 'ac-omni-completion-sources
                               (cons "->" '(ac-source-semantic)))
                  ))

   #+END_SRC
   
*** Enable for modes
    Enable autocomplete for arduino and gmake's makefile since they're
    not on by default.
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'ac-modes 'makefile-gmake-mode)
      (add-to-list 'ac-modes 'arduino-mode)
    #+END_SRC
** Arduino
   Function for setting up a arduino template sketch
   #+BEGIN_SRC emacs-lisp
     (defun init-arduino ()
     "Template arduino sketch"
     (interactive)
     (insert "void setup() {
       // put your setup code here, to run once:

     }

     void loop() {
       // put your main code here, to run repeatedly:

     }")
     )   
   #+END_SRC
** Gnuplot
   Enable gnuplot to be able to plot tables in org mode.
   #+BEGIN_SRC emacs-lisp
     (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
     (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)
   #+END_SRC
   Set that all files ending in .gp will use the gnuplot-mode
   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
   #+END_SRC
** C family
   Specific for C, C++ and other in the c family

   Set indentation to be two spaces.
   #+BEGIN_SRC emacs-lisp
     (setq c-mode-hook
         (function (lambda ()
                     (setq indent-tabs-mode nil)
                     (setq c-indent-level 2))))
     (setq objc-mode-hook
         (function (lambda ()
                     (setq indent-tabs-mode nil)
                     (setq c-indent-level 2))))
     (setq c++-mode-hook
         (function (lambda ()
                     (setq indent-tabs-mode nil)
                     (setq c-indent-level 2))))
   #+END_SRC

   Set the default mode for .h files to be c++-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
   #+END_SRC

   Make it easier to work with camelCase words by enabling subword-mode
   #+BEGIN_SRC emacs-lips
     (add-hook 'c-mode-common-hook (lambda () (subword-mode 1)))
   #+END_SRC

   Add that it will also search src and include directories when
   switching between header and source files
   #+BEGIN_SRC emacs-lisp
     (setq ff-search-directories '("." "../src" "../include"))
   #+END_SRC
** Flycheck
   Enable flycheck globably 
   #+BEGIN_SRC emacs-lisp
     (require 'flycheck)
     (add-hook 'after-init-hook #'global-flycheck-mode)
   #+END_SRC

   Disable clang check, gcc check works better
   #+BEGIN_SRC emacs-lisp
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(c/c++-clang)))
   #+END_SRC
*** Language standard in c++
   Specify language standard in dir locals file: .dir-locals.el 
   For example
   ((c++-mode
     (flycheck-clang-language-standard . "c++14")
     (flycheck-gcc-language-standard . "c++14")))

** Golang
   Set indentation to be 2 spaces
   #+BEGIN_SRC emacs-lisp
     (add-hook 'go-mode-hook 
       (lambda ()
         (setq-default) 
         (setq tab-width 2) 
         (setq standard-indent 2) 
         (setq indent-tabs-mode nil)))
   #+END_SRC

   Enable autocomplete for go
   #+BEGIN_SRC emacs-lisp
     (require 'go-autocomplete)
   #+END_SRC
** Haskell
   Settings for programming haskell in emacs
   #+BEGIN_SRC emacs-lisp
     (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
     (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
     (autoload 'ghc-init "ghc" nil t)
   #+END_SRC
** Ledger
   Settings for ledger
   #+BEGIN_SRC emacs-lisp
     (setq ledger-clear-whole-transactions 1)
   #+END_SRC
   
   Set the default mode for .dat files to ledger
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.dat" . ledger-mode))
   #+END_SRC
** Lisp
   Color haxvalues with their respective color.
   #+BEGIN_SRC emacs-lisp
     (defvar hexcolour-keywords
       '(("#[[:xdigit:]]\\{6\\}"
          (0 (put-text-property (match-beginning 0)
                                (match-end 0)
                                'face (list :background 
                                            (match-string-no-properties 0)))))))
     (defun hexcolour-add-to-font-lock ()
       (font-lock-add-keywords nil hexcolour-keywords))

     (add-hook 'lisp-mode-hook 'hexcolour-add-to-font-lock)
   #+END_SRC
** GLSL
   Set files associated with glsl to use glsl mode
   #+BEGIN_SRC emacs-lisp
     (autoload 'glsl-mode "glsl-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.prog\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
   #+END_SRC
** Default modes
   Set default mode for pb2 files
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("PROJECT" . python-mode))
     (add-to-list 'auto-mode-alist '("BUILD.conf" . makefile-mode))
   #+END_SRC

   Set all files, which filename that starts with Makefile to makefile-gmake-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("Makefile.*" . makefile-gmake-mode))
   #+END_SRC
   
   Set all files that are in the modules directory to makefile
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("modules/.*" . makefile-gmake-mode))
     (add-to-list 'auto-mode-alist '("Make/.*Rules" . makefile-gmake-mode))
   #+END_SRC

   Set all files ending with .mk to makefile-gmake-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.mk$" . makefile-gmake-mode))
   #+END_SRC
** Python
   Set indentation to 2 spaces and disable tab
   #+BEGIN_SRC emacs-lisp
   (setq python-mode-hook
    (function (lambda ()
                (setq indent-tabs-mode nil)
                (setq python-indent 2))))
   #+END_SRC
** RTags (Disabled)
   # #+BEGIN_SRC emacs-lisp
   #   (require 'rtags)
   #   (require 'rtags-ac)
   # #+END_SRC
** Shell
   Indent using spaces. Don't remember why I needed this one
   #+BEGIN_SRC emacs-lisp
     (setq sh-mode-hook
         (function (lambda ()
                     (setq indent-tabs-mode nil)
                     (setq c-indent-level 2))))
   #+END_SRC

   Enable color in shell and define the color theme. Also disable
   yasnippet in shell mode since that's messing with the shell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 
               (lambda ()
                 ;; Enable color in shell
                 (ansi-color-for-comint-mode-on)
                 ;; Change Color theme in shell
                 (setq ansi-color-names-vector
                       ["#4d4d4d" "#D81860" "#60FF60" "#f9fd75" "#4695c8" "#a78edb" "#43afce" "#f3ebe2"])
                 (setq ansi-color-map (ansi-color-make-color-map))
                 ;; Disable yas minor mode
                 (yas-minor-mode -1)
                 ;; Add go and goc to the dirtrack, Need tweak the regexp 
                 ;; (setq shell-cd-regexp "\\(cd\\|goc\\|go\\)")
                 ))
   #+END_SRC
** Tramp
   Set the ssh to be the default method for tramp
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh")   
   #+END_SRC
** Yasnippet
   Enable yasnippet
   #+BEGIN_SRC emacs-lisp
     (yas-global-mode 1)
   #+END_SRC
* Custom functions
** Buffer
   Function for renaming buffer and file. Source: [[http://www.stringify.com/2006/apr/24/rename/][Link]]
   #+BEGIN_SRC emacs-lisp
     (defun rename-current-file-or-buffer ()
       "Rename current file and buffer, similar to save-as but removes
     the old file"
       (interactive)
       (if (not (buffer-file-name))
           (call-interactively 'rename-buffer)
         (let ((file (buffer-file-name)))
           (with-temp-buffer
             (set-buffer (dired-noselect file))
             (dired-do-rename)
             (kill-buffer nil))))
       nil)
   #+END_SRC
   To sync all open buffers with their respective files on disk. Source: [[https://www.emacswiki.org/emacs/RevertBuffer][here]]
   #+BEGIN_SRC emacs-lisp
     (defun revert-all-buffers ()
         "Refreshes all open buffers from their respective files."
         (interactive)
         (dolist (buf (buffer-list))
           (with-current-buffer buf
             (when (and (buffer-file-name) (not (buffer-modified-p)))
               (revert-buffer t t t) )))
         (message "Refreshed open files.") )
   #+END_SRC
** Programming
*** C++
    Insert java style comment
    /**
     * <cursor>
     */
    #+BEGIN_SRC emacs-lisp
      (defun insert-function-comment ()
        (interactive)
        (insert "/**")  (indent-according-to-mode)
        (insert "\n* ") (indent-according-to-mode)
        (insert "\n*/") (indent-according-to-mode)
        (previous-line 1)
        (end-of-line)
        )
    #+END_SRC

    Expands a define macro for all matches in current buffer.
    #+BEGIN_SRC emacs-lisp
      (defun replace-define()
      "Place cursor on a #define <var> <content> and execute this command and it will 
       replace all <var> with <content> in the file. 
       Basically evaluating the define variable"
      (interactive)
      (setq line (split-string (thing-at-point 'line) ))
      (if (equal (car line) "#define") 
          (progn 
            ;; save current position
            (setq curr-pos (point))
            ;; Jump to the end of line
            (end-of-line)
            ;; Replace the first with the second.
            (replace-regexp (concat "\\_<"(nth 1 line)"\\_>") (nth 2 line) )
            ;; return to the same position
            (goto-char curr-pos)
            ;; move to the end of the line to indicate that it's done.
            (end-of-line) )
          ( message "Not a #define directive!" )
        )
      )
    #+END_SRC

    Undo the previous function.
    #+BEGIN_SRC emacs-lisp
      (defun replace-define-undo()
      "Place cursor on a #define <var> <content> and execute this command and it will 
       replace all <content> with <var> in the file. 
       Undoing the expansion of the define variable"
      (interactive)
      (setq line (split-string (thing-at-point 'line) ))
      (if (equal (car line) "#define") 
          (progn 
            ;; save current position
            (setq curr-pos (point))
            ;; Jump to the end of line
            (end-of-line)
            ;; Replace the second with the first
            (replace-string (nth 2 line) (nth 1 line) )
            ;; return to the same position
            (goto-char curr-pos)
            ;; move to the end of the line to indicate that it's done.
            (end-of-line) )
          ( message "Not a #define directive!" )
        )
      )
    #+END_SRC
*** GTags
    Cycling gtag result. Source [[https://www.emacswiki.org/emacs/CyclingGTagsResult][link]]
    #+BEGIN_SRC emacs-lisp
      (defun ww-next-gtag ()
        "Find next matching tag, for GTAGS."
        (interactive)
        (let ((latest-gtags-buffer
               (car (delq nil  (mapcar (lambda (x) (and (string-match "GTAGS SELECT" (buffer-name x)) (buffer-name x)) )
                                       (buffer-list)) ))))
          (cond (latest-gtags-buffer
                 (switch-to-buffer latest-gtags-buffer)
                 (forward-line)
                 (gtags-select-it nil))
                ) ))
    #+END_SRC
** Workspace
   Function for splitting emacs into three frames. 
   Really nice to use with i3wm.
   #+BEGIN_SRC emacs-lisp
     (defun setup-home ()
     "Splits the session into three frames"
     (interactive)
     (delete-other-frames)
     (delete-other-windows)
     (make-frame-command)
     (make-frame-command)
     )
   #+END_SRC
** Shell
   Clear shell in emacs
   #+BEGIN_SRC emacs-lisp
     (defun clear-shell ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))
   #+END_SRC
** Multiple Cursors extentions
   Extra functions for Multiple cursors
   
   #+BEGIN_SRC emacs-lisp
     (defun mc/insert-dec-numbers (arg)
       "Insert decreasing numbers for each cursor, starting at number
     of cursors - 1 or ARG."
       (interactive "P")
       (setq mc--insert-numbers-number (or arg (1- (mc/num-cursors))))
       (mc/for-each-cursor-ordered
        (mc/execute-command-for-fake-cursor 'mc--insert-number-and-decrease cursor)))

     (defun mc--insert-number-and-decrease ()
       (interactive)
       (insert (number-to-string mc--insert-numbers-number))
       (setq mc--insert-numbers-number (1- mc--insert-numbers-number)))

     (defun mc/insert-same-numbers-per-line (arg)
       "Insert increasing numbers for each cursor that are on a separate
     line, cursors on the same line will insert the same number, starts at
     0 or ARG"
     (interactive "P")
     (setq mc--current-line nil
           mc--insert-numbers-number (or arg 0) )
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-number-and-increase-for-diff-lines
                                          cursor)))

     (defun mc/insert-dec-same-numbers-per-line (arg)
       "Insert decreasing numbers for each cursor that are on a
     separate line, cursors on the same line will insert the same
     number, starts at number of cursors - 1 or ARG"
     (interactive "P")
     (setq mc--current-line nil
           mc--insert-numbers-number (or arg (1- (mc/num-cursors))) )
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-number-and-decrease-for-diff-lines
                                          cursor)))

     (defun mc--insert-number-and-increase-for-diff-lines ()
     (interactive)
     (mc--insert-number-and-change-for-diff-lines '1+))

     (defun mc--insert-number-and-decrease-for-diff-lines ()
     (interactive)
     (mc--insert-number-and-change-for-diff-lines '1-))

     (defun mc--insert-number-and-change-for-diff-lines (change)
       (interactive)
       (if (not mc--current-line) 
           ;; If first time init mc--current-line
           (progn (setq mc--current-line (line-number-at-pos))
                  (insert (number-to-string mc--insert-numbers-number)))
         ;; Else compare lines and set accordingly
         (progn  
           ;; If current-line and the line is it on are different change
           ;; and insert.
           (if (not (= mc--current-line (line-number-at-pos)))
               (progn 
                 (setq mc--current-line (line-number-at-pos)
                       mc--insert-numbers-number 
                       (funcall change mc--insert-numbers-number))
                 (insert (number-to-string mc--insert-numbers-number)))
             ;; Else insert number.
             (insert (number-to-string mc--insert-numbers-number)) ))))

     (defun mc/insert-characters (char)
       "Insert increasing character for each cursor, it starts from
     the user specified character"
     (interactive  "cSpecify letter to start from")
     (setq mc--insert-chars-char char)
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-char-and-increase
                                          cursor)))

     (defun mc/insert-dec-characters (char)
       "Insert decreasing character for each cursor, it starts from
     the user specified character"
     (interactive  "cSpecify letter to start from")
     (setq mc--insert-chars-char char)
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-char-and-increase
                                          cursor)))

     (defun mc--insert-char-and-increase ()
       (interactive)
       (mc--insert-char-and-change '1+))

     (defun mc--insert-char-and-decrease ()
       (interactive)
       (mc--insert-char-and-change '1-))

     (defun mc--insert-char-and-change (change)
       (interactive)
       (insert mc--insert-chars-char)
       (setq mc--insert-chars-char (funcall change mc--insert-chars-char)))


     (defun mc/insert-same-chars-per-line (char)
       "Insert increasing character for each cursor that are on a
     separate line, cursors on the same line will insert the same
     character, it starts from the user specified character."
     (interactive  "cSpecify letter to start from")
     (setq mc--current-line nil
           mc--insert-chars-char char )
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-char-and-increase-for-diff-lines
                                          cursor)))

     (defun mc/insert-dec-same-chars-per-line (char)
       "Insert decreasing character for each cursor that are on a
     separate line, cursors on the same line will insert the same
     character, it starts from the user specified character."
     (interactive  "cSpecify letter to start from")
     (setq mc--current-line nil
           mc--insert-chars-char char )
     (mc/for-each-cursor-ordered
      (mc/execute-command-for-fake-cursor 'mc--insert-char-and-decrease-for-diff-lines
                                          cursor)))

     (defun mc--insert-char-and-increase-for-diff-lines ()
       (interactive)
       (mc--insert-char-and-change-for-diff-lines '1+))

     (defun mc--insert-char-and-decrease-for-diff-lines ()
       (interactive)
       (mc--insert-char-and-change-for-diff-lines '1-))

     (defun mc--insert-char-and-change-for-diff-lines ( change )
       (interactive)
       (if (not mc--current-line) 
           ;; If first time init mc--current-line
           (progn (setq mc--current-line (line-number-at-pos))
                  (insert mc--insert-chars-char))
         ;; Else compare lines and set accordingly.
         (progn  
           ;; If current-line and the line is it on is different increment
           ;; and insert.
           (if (not (= mc--current-line (line-number-at-pos)))
               (progn (setq mc--current-line (line-number-at-pos)
                            mc--insert-chars-char 
                            (funcall change mc--insert-chars-char))
                      (insert mc--insert-chars-char))
             ;; Else insert char.
             (insert mc--insert-chars-char)) )))

   #+END_SRC

** Split lines
   Function for splitting lines at specified character. Default is ','.
   #+BEGIN_SRC emacs-lisp
     (defun split-at (&optional delim)
     "Split region/line at DELIM, if there are multiple matches it
     will split each one. DELIM will default to \",\" if no delim is
     given."
     (interactive "sSpecify delimiter: ")
     (when (or (string= delim "") (not delim)) (setq delim ","))
     (let ((start (if (use-region-p) (region-beginning) (point-at-bol)))
           (end (if (use-region-p) (region-end) (point-at-eol)))
           (regex delim))
       (goto-char start)
      
       (while (search-forward-regexp regex end t)
         (insert "\n")
         (setq end (1+ end))
         )
       (indent-region start end)
       (goto-char start)
       )
     )

     (defun split-at-comma ()
     "wrapper for split-at for use with key command"
     (interactive)
     (split-at ",")
     )
   #+END_SRC
* Keybindings
** Macros
    Macro to quickly open a file that is located on my machine at work.
    Inserts "fredriks@bcws067.d2vancouver.com:fredriks/swdevl/CoreLibs"
    #+BEGIN_SRC emacs-lisp
      (fset 'bcws
         [?f ?r ?e ?d ?r ?i ?k ?s ?@ ?b ?c ?b ?e ?l ?l ?w ?s ?1 ?0 ?8 ?. ?d ?2 ?v ?a ?n ?c ?o ?u ?v ?e ?r ?. ?c ?o ?m ?: ?f ?r ?e ?d ?r ?i ?k ?s ?/ ?s ?w ?d ?e ?v ?l ?/ ?C ?o ?r ?e ?L ?i ?b ?s])
    #+END_SRC

    And bind it to the key combo
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c B") 'bcws)
    #+END_SRC
** Registers
   Quickly jump to files by pressing C-x r j <register>
   Jump to my init file with 'e' and init directory with 'i'.
   #+BEGIN_SRC emacs-lisp
     (set-register ?e (cons 'file "~/.emacs.d/init.el")) 
     (set-register ?i (cons 'file "~/.emacs.d/init.d")) 
   #+END_SRC
** UI
   Key bindings if I really need to see the menu and tool bar
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'menu-bar-mode)
     (global-set-key (kbd "<f6>") 'tool-bar-mode)
   #+END_SRC

** Navigation
   Jump between windows using the arrow keys instead of cycling with
   "C-x o".
   #+BEGIN_SRC emacs-lisp
     (global-set-key [M-left] 'windmove-left)   ; move to left windnow
     (global-set-key [M-right] 'windmove-right) ; move to right window
     (global-set-key [M-up] 'windmove-up)       ; move to upper window
     (global-set-key [M-down] 'windmove-down)   ; move to downer window
   #+END_SRC

   Jump to specific line.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-g") 'goto-line)
   #+END_SRC
** Text search
   I'm using the regex variant of the text search more than the normal one.
   Swapping keybindings for them
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-M-s") 'isearch-forward)
     (global-set-key (kbd "C-M-r") 'isearch-backward)
     (global-set-key (kbd "C-s") 'isearch-forward-regexp)
     (global-set-key (kbd "C-r") 'isearch-backward-regexp)
     (global-set-key (kbd "C-S-s") 'isearch-forward-symbol-at-point)
   #+END_SRC
** Text edit
   Bind replace regexp to meta r
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-r") 'replace-regexp)
   #+END_SRC
   
   Duplicate line
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'duplicate-line)
   #+END_SRC

   Split line at comma
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-,") 'split-at-comma)
   #+END_SRC
** Move text
   Move line up and down using arrow keys
   #+BEGIN_SRC emacs-lisp
     (global-set-key [C-S-up] 'move-text-up)
     (global-set-key [C-S-down] 'move-text-down)
   #+END_SRC
** Magit
   Run magit
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
** Gnuplot
   Bind the F9 key to open a buffer into gnuplot mode
   #+BEGIN_SRC emacs-lisp
     (global-set-key [(f9)] 'gnuplot-make-buffer)
   #+END_SRC
** Buffer functions
   Key bindings for revert-all-buffers and rename current buffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c r") 'revert-all-buffers)
     (global-set-key "\C-cR" 'rename-current-file-or-buffer)
   #+END_SRC
** Buffer move
   Move buffers around between windows
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<M-S-up>")     'buf-move-up)
     (global-set-key (kbd "<M-S-down>")   'buf-move-down)
     (global-set-key (kbd "<M-S-left>")   'buf-move-left)
     (global-set-key (kbd "<M-S-right>")  'buf-move-right)
   #+END_SRC
** C Common
   Hide/Show code blocks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
       (lambda()
         (local-set-key (kbd "C-c <right>") 'hs-show-block)
         (local-set-key (kbd "C-c <left>")  'hs-hide-block)
         (local-set-key (kbd "C-c <up>")    'hs-hide-all)
         (local-set-key (kbd "C-c <down>")  'hs-show-all)
         (hs-minor-mode t)))
   #+END_SRC

   When in a c family buffer use shift tab to switch between header
   and source
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
       (lambda() 
         (local-set-key  (kbd "<backtab>") 'ff-find-other-file)))
   #+END_SRC
   
** Evil numbers
   Incrementing/decrementing numbers.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
     (global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-=") 'er/expand-region)
   #+END_SRC
** Tags
*** GTags
    Key bindings for finding gtag, reference and usage of symbol
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-.") 'gtags-find-tag) ;; Finds tag
      (global-set-key (kbd "C-M-.") 'gtags-find-rtag)   ;; Find all references of tag
      (global-set-key (kbd "C-M-,") 'gtags-find-symbol) ;; Find all usages of symbol.
    #+END_SRC
*** RTags (Disabled)
    # Key bindings for RTags (they conflicts with GTags)
    # #+BEGIN_SRC emacs-lisp
    #   (global-set-key (kbd "M-.") 'rtags-find-symbol-at-point)
    #   (global-set-key (kbd "M-,") 'rtags-find-references-at-point)

    #   (global-set-key (kbd "M-[") 'rtags-location-stack-back)
    #   (global-set-key (kbd "M-]") 'rtags-location-stack-forward)
    # #+END_SRC
** Java
   Key bindings for Java autocomplete
   #+BEGIN_SRC emacs-lisp
     (local-set-key (kbd "C-c i") (quote ajc-import-all-unimported-class))
     (local-set-key (kbd "C-c m") (quote ajc-import-class-under-point))
   #+END_SRC
** Compile
   Key bindings to run make on current location and to re-run the
   command.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f12>") 'compile)
     (global-set-key (kbd "<f11>") 'recompile)
   #+END_SRC
** Multiple cursors
   Keybindings for the mc package
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
     (global-set-key (kbd "C-+") 'mc/mark-next-like-this)
   #+END_SRC
** String inflections
   Keybinding for cycle between snake case, camel case etc
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-;") 'string-inflection-cycle )
   #+END_SRC
** Sudo edit
   Sudo edit the current file
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-r") 'sudo-edit-current-file)
   #+END_SRC
* Bug workarounds
Workarounds for bugs I have encountered through out the years
** Cursor turns black
   Set the cursor color to white.
   #+BEGIN_SRC emacs-lisp
     (set-cursor-color "#ffffff")
   #+END_SRC
** Maximize emacs under KDE
   Issue maximizing emacs with KDE at work
   #+BEGIN_SRC emacs-lisp
     (setq frame-resize-pixelwise t)
   #+END_SRC
