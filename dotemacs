;; -*- mode: lisp -*-
;; =============================================================================
;; Load init files 
;; url; http://stackoverflow.com/questions/2079095/how-to-modularize-an-emacs-configuration
;; author: seh
;; =============================================================================
;; (defconst user-init-dir
;;   (cond ((boundp 'user-emacs-directory)
;;          user-emacs-directory)
;;         ((boundp 'user-init-directory)
;;          user-init-directory)
;;         (t "~/.emacs.d/")))
(defconst user-init-dir "~/projects/dotemacs/init.d")
(defun load-user-file (file)
  (interactive "f")
  "Load a file in current user's configuration directory"
  (load-file (expand-file-name file user-init-dir)))				

;; =========================== Load init files =================================
;; This must be loaded first.							
(load-user-file "init.el")
(load-user-file "auto-complete.el")

;; Work
(load-user-file "work.el") ;; defines work/is-work variable
(when work/is-work
  (load-user-file "gnu-plot.el")
  (load-user-file "dd-newfile.el"))

;; Key bindings
(load-user-file "macros.el")
(load-user-file "keys.el")
(load-user-file "registers.el")

;; Packages 
(load-user-file "ack.el")
(load-user-file "expand-region.el")
(load-user-file "evil-numbers.el")
(load-user-file "multiple-cursors.el")
(load-user-file "multi-term.el")
(load-user-file "yasnippet.el")
(load-user-file "nerv.el")
(load-user-file "tramp.el")

;; Modes
(load-user-file "cua-mode.el")
(load-user-file "glsl-mode.el")
(load-user-file "android-mode.el")
(load-user-file "misc-mode.el")

;; Language specific.
(load-user-file "lisp.el")
(load-user-file "c-family.el")
(load-user-file "haskell.el")
(load-user-file "python.el")
(load-user-file "shell.el")

;; Functions
(load-user-file "text-functions.el")
(load-user-file "debug-functions.el")
(load-user-file "highlight-functions.el")
(load-user-file "buffer-functions.el")
(load-user-file "misc-functions.el")
;; =============================================================================

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(nxml-slash-auto-complete-flag t)

 '(safe-local-variable-values (quote ((newfile-authors . "Fredrik Salomonsson") (newfile-project-name . "sdl") (newfile-project-name . "sdl-tutorials") (newfile-project-name . "fury") (eval setq newfile-project-name (progn (let ((path (file-name-directory (file-truename (dir-locals-find-file "."))))) (string-match ".*/\\(.*\\)/" path) (match-string-no-properties 1 path)))) (eval setq newfile-project-name (progn (let ((path (file-name-directory (file-truename (buffer-name))))) (string-match ".*/\\(.*\\)/" path) (match-string-no-properties 1 path)))) (newfile-project-name . "newfile")))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

